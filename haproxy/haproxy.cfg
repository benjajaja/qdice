global
    # log to sidecar rsyslog container
    # with syslog facility to accomplish rsyslog-alpine cfg
    # log rsyslog syslog

    maxconn 20480
    ############# IMPORTANT #################################
    ## DO NOT SET CHROOT OTHERWISE YOU HAVE TO CHANGE THE  ##
    ## acme-http01-webroot.lua file                        ##
    # chroot /jail                                         ##
    #########################################################
    lua-load /etc/haproxy/acme-http01-webroot.lua
    #
    # SSL options
    ssl-default-bind-ciphers AES256+EECDH:AES256+EDH:!aNULL;
    tune.ssl.default-dh-param 4096

    # workaround for bug #14 (Cert renewal blocks HAProxy indefinitely with Websocket connections)
    hard-stop-after 3s

    # simple log to stdout, handled by docker
    # log stdout format raw local0

# DNS runt-time resolution on backend hosts
resolvers docker
    nameserver dns "127.0.0.11:53"

defaults
    log global
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option forwardfor
    option httplog

    # never fail on address resolution
    default-server init-addr last,libc,none

frontend http
    bind *:80,[::]:80
    mode http
    acl url_acme_http01 path_beg /.well-known/acme-challenge/
    http-request use-service lua.acme-http01 if METH_GET url_acme_http01
    redirect scheme https code 301 if !{ ssl_fc }

frontend https
    bind *:443,[::]:443 ssl crt /etc/haproxy/certs/ no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

    use_backend jabber if { req.hdr(host) -i chat.qdice.wtf conference.qdice.wtf upload.qdice.wtf pubsub.qdice.wtf }

    # acl matrix-host hdr(host) -i matrix.qdice.wtf matrix.qdice.wtf:443
    # acl matrix-path path_beg /_matrix
    # acl matrix-path path_beg /_synapse/client
    # use_backend matrix if matrix-host matrix-path
    use_backend matrix if { req.hdr(host) -i matrix.qdice.wtf matrix.qdice.wtf:443 } || { path_beg /_matrix } || { path_beg /_synapse/client }

    # delegation
    # acl matrix-well-known-client-path path /.well-known/matrix/client
    # acl matrix-well-known-server-path path /.well-known/matrix/server
    use_backend matrix-well-known-client if { path /.well-known/matrix/client }
    use_backend matrix-well-known-server if { path /.well-known/matrix/server }

    use_backend api if { path /api } || { path_beg /api/ }

    use_backend mqtt if { path /mqtt } || { path_beg /mqtt/ }

    default_backend nginx


frontend matrix-federation
  # bind *:8448,[::]:8448 ssl crt /etc/haproxy/certs/ alpn h2,http/1.1
  bind *:8448,[::]:8448 ssl crt /etc/haproxy/certs/ no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-For %[src]

  default_backend matrix

backend matrix-well-known-client
  http-after-response set-header Access-Control-Allow-Origin "*"
  http-after-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
  http-after-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  http-request return status 200 content-type application/json string '{"m.homeserver":{"base_url":"https://qdice.wtf"},"m.identity_server":{"base_url":"https://matrix.org"}}'

backend matrix-well-known-server
  http-after-response set-header Access-Control-Allow-Origin "*"
  http-after-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
  http-after-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  http-request return status 200 content-type application/json string '{"m.server":"qdice.wtf"}'

backend nginx
    server nginx nginx:80 check resolvers docker resolve-prefer ipv4
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

backend api
    http-request replace-path /api(/)?(.*) /\2
    server api nodice:5001 check resolvers docker resolve-prefer ipv4
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

backend mqtt
    server mqtt emqx:8083 check resolvers docker resolve-prefer ipv4

backend jabber
    server jabber ejabberd:5443 check resolvers docker resolve-prefer ipv4

backend matrix
    server matrix matrix:8008 check resolvers docker resolve-prefer ipv4

