version: "2"

services:
  postgres:
    restart: always
    build: ./postgres
    environment:
      POSTGRES_DB: "nodice"
      POSTGRES_USER: "bgrosse"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  emqx:
    image: emqx/emqx:v3.2.7
    environment:
      EMQX_LOADED_PLUGINS: "emqx_management,emqx_auth_username,emqx_recon,emqx_retainer,emqx_dashboard"
      EMQX_DASHBOARD__DEFAULT_USER__PASSWORD: ${EMQX_DASHBOARD_PASSWORD}
      # EMQX_ALLOW_ANONYMOUS: "true"
      # EMQX_AUTH__JWT__SECRET: ${JWT_SECRET}
      # EMQX_AUTH__JWT__FROM: "password"
      EMQX_AUTH__USER__1__USERNAME: ${MQTT_USERNAME}
      EMQX_AUTH__USER__1__PASSWORD: ${MQTT_PASSWORD}
    volumes:
      - ./data/emqx/acl.conf:/opt/emqx/etc/acl.conf:ro
  nodice:
    restart: always
    image: bgrosse/qdice:backend
    env_file: .env
    volumes:
      - ${AVATAR_PATH}:/avatars
    depends_on:
      - postgres
      - emqx
  telegram:
    restart: always
    image: bgrosse/qdice:backend
    env_file: .env
    volumes:
      - ${AVATAR_PATH}:/avatars
    depends_on:
      - postgres
      - emqx
    command: "node telegram.js"
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  nginx:
    restart: always
    env_file: .env
    image: bgrosse/qdice:frontend-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ${AVATAR_PATH}:/var/www/qdice.wtf/pictures:ro
      - ./data/logs/nginx:/var/log/nginx
      - goaccess:/var/www/goaccess:ro
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - emqx
      - nodice
      - certbot
  goaccess:
    image: allinurl/goaccess
    restart: always
    volumes:
      - ./data/goaccess/goaccess.conf:/srv/data/goaccess.conf:ro
      - goaccess:/srv/report:rw
      - ./data/logs/nginx:/srv/logs:ro
    command: "--no-global-config --config-file=/srv/data/goaccess.conf"
    cap_drop:
      - all
    depends_on:
      - nginx

networks:
  default:
    external:
      name: qdice

volumes:
  goaccess:

